rm('newData')
library(VIM)
newdata = kNN(msleep, k=5)
library(class)
newdata = kNN(msleep, k=5)
install.packages('class')
library(class)
newdata = kNN(msleep, k=5)
library('class')
newdata = kNN(msleep, k=5)
library()
library(class)
newdata = kNN(msleep, k=5)
install.packages('VIM')
library(VIM)
newdata = kNN(msleep, k=5)
newdata
43 / 16
43 // 16
1 + 2 * 2
1
1 + 2 / 3
4 / 2 * 3
2 * 3 / 4
sales = 350
royalty = 7
s50 * 7
350 * 7
sales * royalty
revenue = sales * royalty
revenue
revenue = revenue + 550
if = 100
else = 10
FALSE = 1
NA_thing = 1
NA_thing_ = 1
NA_character_ = 1
rm('*')
NA_character_ = TRUE
rm('NA')
a1 = sqrt(225)
a1
225 ^ 0.5
a5(2 2 5)
a5 = (2 2 5)
a2 = ( 225 )
a2 = sqrt( 225 )
a1 == a2
a3 = swrt(225 )
a3 = sqrt(225 )
a2 == a3
a1 = sqrt('a')
a1 = sqrt(a)
abs(21)
abs( -13 )
sqrt(1 + abs(-8))
sqrt(-8)
sqrt(abs(-8))
sqrt(abs(-8))
round(3.1)
round(3.5)
round(3.49)
round( 2, 3.1)
2+2!=5
2+2!=5 == 1/0
2+2!=5 = 1/0
2+2!=5 | 1/0
1/0 | 2=2!=5
1/0 | 2+2!=5
1/0 == TRUE|FALSE
1/0
"cat" == "dog"
"cat" == "cat"
"cat" = "c a t"
"cat" == "c a t"
rm('cat')
sales.by.month = c(0,100,200,50,0,0,0,0,0,0,0,)
sales.by.month = c(0,100,200,50,0,0,0,0,0,0,0)
sales.by.month[ C(2,3,4)]
sales.by.month[ C(2,3,4) ]
sales.by.month[ C(2,3,4)]
sales.by.month = 0,100,200,50,0,0,0,0,0,0,0
sales.by.month = [0,100,200,50,0,0,0,0,0,0,0]
sales.by.month
sales.by.month[ c(2,3,4) ]
sales.by.month[ c(4,3,2) ]
sales.by.month[ c(2,3,4,5,6,7,8) ]
sales.by.month[2:8]
rm('sales.by.month')
Group = c(1,1,1,2,2,2,3,3,3)
Gender = c(1,1,1,1,1,2,2,2,2)
age = c(17,19,21,37,18,19,47,18,19)
Score = c(12,10,11,15,16,14,25,21,29)
Genderx = c()
Groupx = c()
Groupx[Group==1] = 'group 1'
Groupx[Group==2] = 'group 2'
Groupx[Group==3] = group 3
Groupx[Group==3] = 'group 3'
Genderx[Gender==1] = 'male'
Genderx[Gender==2] = 'female'
Genderx
Groupx
Age = age
rm('age')
rm('group')
rm('Group')
rm('Gender')
expt = data.frame(Age,Genderx,Groupx,Score)
expt
names(expot)
names(expt)
str(expt)
data(starwars)
library(dplyr)
data(starwars)
rm('Age')
rm('Genderx')
rm('Groupx')
rm('Score')
rm('expt')
library(tidyr)
long_data = gather(wide_data, key=
)
rm('starwars')
salaries = c(50000,60000,65000)
median(salaries)
mean(salaries)
salaries + 6500000
salaries = c(salaries, 6500000)
median(salaries)
mean(salaies)
mean(salaries)
salaries = c(55000, 70000, 90000, 110000, 120000, 136000, 142800)
mean(salaries)
table(salarie)
table(salaries)
salaries = c(salaries, 55000)
table(salaries)
salaries
salaries[0]
salaries.0
max(salaries.margins)
max(salaries)
min(salaries)
salaries = c(48960, 55000, 70000, 90000, 110000, 120000, 136000, 142800)
mean(salaries)
median(salaries)
range(salaries)
quantile(x = salaries, probs = .5)
numbers(-11,2,3,4,5,6,7,8,9,10)
numbers = c(-11,2,3,4,5,6,7,8,9,10)
quantile(x = numbers, probs = 0.5)
quantile(x = numbers, probs = 0.4)
quantile(x = numbers, probs = 0.6)
quantile(x = numbers, probs = 0.5)
mean(numbers)
numbers = c(-100,2,3,4,5,6,7,8,9,10)
mean(numebrs)
mean(numbers)
quantile(x = numbers, probs = seq(1,0.5,0.4))
quantile(x = numbers, probs = seq(0,1,0.25))
quantile(x = numbers, probs = c(0,1,0.25))
quantile(x = numbers, probs = c(0,025,0.5,0.75))
quantile(x = numbers, probs = c(0,0.25,0.5,0.75))
quantile(x = numbers, probs = c(0,0.25,0.5,0.75,1))
X = c(56,31,56,8,32)
median = median(X)
deviation = X - median
absolute_deviation = abs(deviation)
mean_of_data = mean(absolute_deviation)
var(numbers)
mean((numbers - mean(numbers))^2)
var(numbers) * (numbers - 1) / numbers
length = len(numbers)
length = length(numbers)
var(numbers) * (n - 1) / n
var(numbers) * (length - 1) / length
var(numbers) * ((length - 1) / length)
var(numbers) * (length - 1) / length
sd(numbers)
nubers
numbers
sd(numbers)
library(psych)
skew(x=numbers)
no_skew_numbers = c(1,2,3,4,5,5,4,3,2,1)
skew(x=no_skew_numbers)
positive_skew_numbers = c(1,2,3,4,5,6,7,8,9)
skew(positive_skew_numbers)
positive_skew_numbers = c(1,2,3,4,5,6,7,8,9,100)
skew(positive_skew_numbers)
kurtosis(numbers)
kurtosi(numbers)
kurtosi(positive_skew_numbers)
kurtosi(negative_skew_numbers)
kurtosi(no_skew_numbers)
summary(numbers)
summary(numbers).Min
summary(numbers).Min.
summary(numbers)['Min.']
summary(numbers)['Median']
summary(numbers)['Median']['value']
summary(numbers)['Median'][0]
summary(numbers)['Median'].value
summary(numbers)['Median']['Key']
summary(numbers)['Median']
summary(numbers)['Max']
summary(numbers)['Max.']
summary(numbers)['Median 3rd Qu.']
summary(numbers)['Mean']
summary(numbers)['3rd Qu.']
blowouts = afl.margins > 50
afl
data("afl")
library(afl)
load("clinicaltrial.Rdata")
ls
dir
ls
Auto = read.csv("Auto.csv")
Auto = read.csv("Intro Stats for Data Analytics\Auto.csv")
Auto = read.csv("Intro Stats for Data Analytics/Auto.csv")
rm('Auto')
Auto = read.csv("Auto.csv")
class(Auto)
str(Auto)
typeof(Auto)
dim(Auto)
Auto = na.omit(Auto)
dim(Auto)
Auto = read.csv("Auto.csv")
dim(Auto)
sum(is.na(Auto))
na.omit(Auto)
Auto = na.omit(Auto)
dim(Auto
)
names(Auto)
attach(Auto)
plot(cylinders, mpg, xlab = "cylinders", ylab = "mpg")
Auto$cylinders = as.factor(Auto$cylinders)
plot(Auto$cylinders, Auto$mpg, col = "green")
plot(Auto$cylinders, Auto$mpg, xlab = "cylinders", ylab = "mpg", col = "green")
hist(Auto$mpg, breaks = 10, col = "green", xlab = "mpg", ylab = "frequency")
hist(Auto$mpg, breaks = 10, col = "green", xlab = "mpg", ylab = "frequency", main = "Histogram of MPG")
hist(Auto$mpg, breaks = 10, col = "green", xlab = "mpg", ylab = "occurances", main = "Histogram of MPG")
hist(Auto$mpg, breaks = 11, col = "green", xlab = "mpg", ylab = "occurances", main = "Histogram of MPG")
hist(Auto$mpg, breaks = 10, col = "green", xlab = "mpg", ylab = "occurances", main = "Histogram of MPG")
hist(Auto$mpg, breaks = seq(min(Auto$mpg), max(Auto$mpg), length.out = 11), col="green", xlab = "mpg", ylab "occurences", main = "Histogram of MPG")
hist(Auto$mpg, breaks = seq(min(Auto$mpg), max(Auto$mpg), length.out = 11), col="green", xlab = "mpg", ylab = "occurences", main = "Histogram of MPG")
pairs(Auto[, c("mpg", "displacement", "horsepower", "weight", "acceleration")], main = "Scatterplot of variables", col = "green")
pairs(Auto[, c("mpg", "displacement", "horsepower", "weight", "acceleration")], main = "Scatterplot of variables", col = "green", pch = 19)
pairs(Auto[, c("mpg", "displacement", "horsepower", "weight", "acceleration")], main = "Scatterplot of variables", col = "green")
things_i_care_about <- Auto[, c("mpg", "displacement", "horsepower", "weight", "acceleration")]
things_i_care_about = Auto[, c("mpg", "displacement", "horsepower", "weight", "acceleration")]
things_i_care_about = data.frame(lapply(things_i_care_about, function(x) as.numeric(as.character(x))))
clear()
clearPushBack()
rm("Auto")
rm("things_i_care_about")
Auto = read.csv("Auto.csv")
class(Auto)
typeof(Auto)
dim(Auto)
Auto = na.omit(Auto)
dim(Auto)
names(Auto)
attach(Auto)
Auto = read.csv("Auto.csv")
class(Auto)
typeof(Auto)
dim(Auto)
Auto = na.omit(Auto)
dim(Auto)
names(Auto)
if ("Auto" %in% search()) detach("Auto")
attach(Auto)
plot(cylinders, mpg, xlab = "cylinders", ylab = "mpg")
Auto$cylinders = as.factor(Auto$cylinders)
plot(Auto$cylinders, Auto$mpg, xlab = "cylinders", ylab = "mpg", col = "green")
hist(Auto$mpg, breaks = seq(min(Auto$mpg), max(Auto$mpg), length.out = 11),
col="green",
xlab = "mpg",
ylab = "occurences",
main = "Histogram of MPG")
breaks_in_mpg= seq(min(Auto$mpg), max(Auto$mpg), length.out = 11)
hist(Auto$mpg, breaks = breaks_in_mpg,
col="green",
xlab = "mpg",
ylab = "occurences",
main = "Histogram of MPG")
hist(Auto$mpg, breaks = breaks_in_mpg,
col="green",
xlab = "mpg",
ylab = "occurences",
main = "Histogram of MPG")
hist(Auto$mpg, breaks = breaks_in_mpg,
col="green",
xlab = "mpg",
ylab = "occurences",
main = "Histogram of MPG")
hist(Auto$mpg, breaks = breaks_in_mpg,
col="green",
xlab = "mpg",
xlim = range(breaks_in_mpg),
xaxt = "n",
ylab = "occurences",
main = "Histogram of MPG")
hist(Auto$mpg, breaks = breaks_in_mpg,
col="green",
xlab = "mpg",
xlim = range(breaks_in_mpg),
ylab = "occurences",
main = "Histogram of MPG")
hist(Auto$mpg, breaks = breaks_in_mpg,
col="green",
xlab = "mpg",
ylab = "occurences",
main = "Histogram of MPG")
hist(Auto$mpg, breaks = breaks_in_mpg,
col="green",
xlab = "mpg",
ylab = "occurences",
main = "Histogram of MPG")
Auto$horsepower <- as.numeric(Auto$horsepower)
Auto_clean <- na.omit(Auto)
selected_vars <- Auto_clean[, c("mpg", "displacement", "horsepower", "weight", "acceleration")]
pairs(selected_vars)
typeof(Auto)
dim(Auto)
names(Auto)
attach(Auto)
plot(cylinders, mpg, xlab = "cylinders", ylab = "mpg")
Auto$cylinders = as.factor(Auto$cylinders)
plot(Auto$cylinders, Auto$mpg, xlab = "cylinders", ylab = "mpg", col = "green")
breaks_in_mpg = seq(min(Auto$mpg), max(Auto$mpg), length.out = 11)
hist(Auto$mpg, breaks = breaks_in_mpg,
col="green",
xlab = "mpg",
ylab = "occurences",
main = "Histogram of MPG")
Auto$horsepower <- as.numeric(Auto$horsepower)
Auto_clean <- na.omit(Auto)
selected_vars <- Auto_clean[, c("mpg", "displacement", "horsepower", "weight", "acceleration")]
pairs(selected_vars)
# a)	load Auto.csv file in a variable called Auto.
Auto = read.csv("Auto.csv")
# b)	What is the type and class of Auto variable
class(Auto)
typeof(Auto)
# c)	Use a R command/function to find the dimensions of the Auto variable
dim(Auto)
# a)	Use an R command to remove all NA’s from Auto variable.
# redo  step (c) to report the new dimensions of Auto variable
Auto = na.omit(Auto)
dim(Auto)
# e)	Use an R command to report the names of all variables in Auto
names(Auto)
# f)	Use attach() function to be able to directly access fields
# in Auto variable and then plot the cylinders by mpg. The axes of
# the plot should not have “Auto$.....” string
attach(Auto)
plot(cylinders, mpg, xlab = "cylinders", ylab = "mpg")
# g)	Convert the “cylinders” field in auto to a factor and use the
# plot function to generate a plot of cylinders by mpg. Make sure the
# results are draw with green color and the y and x axis of the
# graph has “CYLINDERS” and “MPG” respectively
Auto$cylinders = as.factor(Auto$cylinders)
plot(Auto$cylinders, Auto$mpg, xlab = "cylinders", ylab = "mpg", col = "green")
# h)	Draw a histogram of mpg variable in auto, using green color to
# fill the bars. Make sure that the histogram only generate 10 bars
breaks_in_mpg = seq(min(Auto$mpg), max(Auto$mpg), length.out = 11)
hist(Auto$mpg, breaks = breaks_in_mpg,
col="green",
xlab = "mpg",
ylab = "occurences",
main = "Histogram of MPG")
# i)	Use the pairs() function in R to  generate a plot matrix,
# consisting of scatterplots for each variable-combination of
# “mpg”, “displacement”, “horsepower”, “weight”, and “acceleration”
# fields in Auto variable.
Auto$horsepower <- as.numeric(Auto$horsepower)
Auto_clean <- na.omit(Auto)
selected_vars <- Auto_clean[, c("mpg",
"displacement",
"horsepower",
"weight",
"acceleration")]
pairs(selected_vars)
# a)	load Auto.csv file in a variable called Auto.
Auto = read.csv("Auto.csv", na.strings = '?')
# b)	What is the type and class of Auto variable
class(Auto)
typeof(Auto)
# c)	Use a R command/function to find the dimensions of the Auto variable
dim(Auto)
# a)	Use an R command to remove all NA’s from Auto variable.
# redo  step (c) to report the new dimensions of Auto variable
Auto = na.omit(Auto)
dim(Auto)
# e)	Use an R command to report the names of all variables in Auto
names(Auto)
# h)	Draw a histogram of mpg variable in auto, using green color to
# fill the bars. Make sure that the histogram only generate 10 bars
hist(Auto$mpg,
breaks = seq(min(Auto$mpg), max(Auto$mpg), length.out = 11),
col = "green")
# a)	load Auto.csv file in a variable called Auto.
Auto = read.csv("Auto.csv", na.strings = '?')
# b)	What is the type and class of Auto variable
class(Auto)
typeof(Auto)
# c)	Use a R command/function to find the dimensions of the Auto variable
dim(Auto)
# a)	Use an R command to remove all NA’s from Auto variable.
# redo  step (c) to report the new dimensions of Auto variable
Auto = na.omit(Auto)
dim(Auto)
# e)	Use an R command to report the names of all variables in Auto
names(Auto)
# f)	Use attach() function to be able to directly access fields
# in Auto variable and then plot the cylinders by mpg. The axes of
# the plot should not have “Auto$.....” string
attach(Auto)
plot(cylinders, mpg, xlab = "cylinders", ylab = "mpg")
# g)	Convert the “cylinders” field in auto to a factor and use the
# plot function to generate a plot of cylinders by mpg. Make sure the
# results are draw with green color and the y and x axis of the
# graph has “CYLINDERS” and “MPG” respectively
Auto$cylinders = as.factor(Auto$cylinders)
plot(Auto$cylinders, Auto$mpg, xlab = "cylinders", ylab = "mpg", col = "green")
# h)	Draw a histogram of mpg variable in auto, using green color to
# fill the bars. Make sure that the histogram only generate 10 bars
hist(Auto$mpg,
breaks = seq(min(Auto$mpg), max(Auto$mpg), length.out = 11),
col = "green")
# i)	Use the pairs() function in R to  generate a plot matrix,
# consisting of scatterplots for each variable-combination of
# “mpg”, “displacement”, “horsepower”, “weight”, and “acceleration”
# fields in Auto variable.
Auto$horsepower = as.numeric(Auto$horsepower)
Auto_clean = na.omit(Auto)
selected_vars = Auto_clean[, c("mpg",
"displacement",
"horsepower",
"weight",
"acceleration")]
pairs(selected_vars)
# j)	Report Descriptive Statistics for all fields of Auto variable
summary(Auto_clean)
#Mean   :23.45   6: 83     Mean   :194.4   Mean   :104.5   Mean   :2978   Mean   :15.54   Mean   :75.98
#3rd Qu.:29.00   8:103     3rd Qu.:275.8   3rd Qu.:126.0   3rd Qu.:3615   3rd Qu.:17.02   3rd Qu.:79.00
#Max.   :46.60             Max.   :455.0   Max.   :230.0   Max.   :5140   Max.   :24.80   Max.   :82.00
#origin          name
#Min.   :1.000   Length:392
#1st Qu.:1.000   Class :character
#Median :1.000   Mode  :character
#Mean   :1.577
#3rd Qu.:2.000
#Max.   :3.000
sapply(Auto_clean[, sapply(Auto_clean, is.numberic)], sd)
#Mean   :23.45   6: 83     Mean   :194.4   Mean   :104.5   Mean   :2978   Mean   :15.54   Mean   :75.98
#3rd Qu.:29.00   8:103     3rd Qu.:275.8   3rd Qu.:126.0   3rd Qu.:3615   3rd Qu.:17.02   3rd Qu.:79.00
#Max.   :46.60             Max.   :455.0   Max.   :230.0   Max.   :5140   Max.   :24.80   Max.   :82.00
#origin          name
#Min.   :1.000   Length:392
#1st Qu.:1.000   Class :character
#Median :1.000   Mode  :character
#Mean   :1.577
#3rd Qu.:2.000
#Max.   :3.000
sapply(Auto_clean[, sapply(Auto_clean, is.numeric)], sd)
#mpg displacement   horsepower       weight acceleration         year       origin
#7.8050075  104.6440039   38.4911599  849.4025600    2.7588641    3.6837365    0.8055182
length(unique(Auto$name))
normal.a = rnorm( n=1000, mean=0 sd=1 )
print(normal.a)
normal.a = rnorm( n=1000, mean=0, sd=1 )
print(normal.a)
hist(normal.a)
normal.c = rnorm(n=1000)
normal.b = rnorm(n=1000)
chi.sq.3 = (normal.a)^2 + (normal.b)^2 + (normal.c)^2
hist(chi.sq.3)
t.3 = normal.d / sqrt(scaled.chi.sq.3)
normal.d = rnorm(n=1000)
t.3 = normal.d / sqrt(scaled.chi.sq.3)
scaled.chi.sq.3 = chi.sq.3 / 3
normal.d = rnorm(n=1000)
t.3 = normal.d / sqrt(scaled.chi.sq.3)
chi.sq.20 = rchisq(1000,20)
scaled.chi.sq.20 = chi.sq.20 / 20
F.3.20 = scaled.chi.sq.3 / scaled.chi.sq.20
hist(F.3.20)
normal.a = rnorm( n=1000, mean=0, sd=1 )
print(normal.a)
hist(normal.a)
normal.b = rnorm(n=1000)
normal.c = rnorm(n=1000)
chi.sq.3 = (normal.a)^2 + (normal.b)^2 + (normal.c)^2
hist(chi.sq.3)
scaled.chi.sq.3 = chi.sq.3 / 3
normal.d = rnorm(n=1000)
t.3 = normal.d / sqrt(scaled.chi.sq.3)
chi.sq.20 = rchisq(1000,20)
scaled.chi.sq.20 = chi.sq.20 / 20
F.3.20 = scaled.chi.sq.3 / scaled.chi.sq.20
hist(F.3.20)
hist(t.3)
setwd("C:/Users/Joe Weibel/Desktop/git/school_code/R")
